services:

  gmp-config-server-service:
    build: ./services/config-server-service
    container_name: gmp-config-server-service
    environment:
      - CONFIG_SERVICE_URL:${ENV_CONFIG_SERVICE_URL}
    ports:
      - 8888
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "${CONFIG_SERVICE_HEALTH_URL}" ]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 90s

  gmp-discovery-service:
    build: ./services/discovery-service
    container_name: gmp-discovery-service
    ports:
      - "8761:8761"
    networks:
      - microservices-net
    depends_on:
      gmp-config-server-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "${DISCOVERY_SERVICE_HEALTH_URL}" ]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 90s

  mysql-server:
    image: mysql:8.0
    container_name: gmp_products_service_db
    environment:
      MYSQL_DB_HOST: ${MYSQL_DB_HOST}
      MYSQL_DB_PORT: ${MYSQL_DB_PORT}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}รง
    ports:
      - ${MYSQL_DB_PORT}:3306
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - database
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 90s
  gmp-products-service:
    build: ./services/products-service
    container_name: gmp-products-service
    ports:
      - "8014:8014"
    environment:
      - DISCOVERY_SERVICE_URL=${ENV_DISCOVERY_SERVICE_URL}
      - CONFIG_SERVICE_URL=${ENV_CONFIG_SERVICE_URL}
      - PRODUCTS_DB_HOST=mysql-server
      - PRODUCTS_PORT=${MYSQL_DB_PORT}
      - PRODUCTS_DB=${MYSQL_DATABASE}
      - PRODUCTS_DB_USERNAME=${MYSQL_USER}
      - PRODUCTS_DB_PASSWORD=${MYSQL_PASSWORD}
    depends_on:
      mysql-server:
        condition: service_healthy
      gmp-config-server-service:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "${PRODUCTS_SERVICE_HEALTH_URL}" ]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 90s

  gmp-postgres-server:
    image: postgres:15
    container_name: gmp_postgres-db
    environment:
      POSTGRES_SERVER_HOST: ${POSTGRES_SERVER_HOST}
      POSTGRES_SERVER_PORT: ${POSTGRES_SERVER_PORT}
      POSTGRES_USER: pispa
      POSTGRES_PASSWORD: pispa
      PGDATA: /var/lib/postgresql/data
    ports:
      - ${POSTGRES_SERVER_PORT}:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - database
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${ORDER_DB_USERNAME}" ]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 90s
  gmp-pgadmin:
    container_name: gmp_pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - 8024:80
    networks:
      - database
    restart: unless-stopped
  gmp-orders-service:
    build: ./services/order-service
    container_name: gmp-orders-service
    ports:
      - "8015:8015"
    environment:
      - DISCOVERY_SERVICE_URL=${ENV_DISCOVERY_SERVICE_URL}
      - CONFIG_SERVICE_URL=${ENV_CONFIG_SERVICE_URL}
      - ORDER_POSTGRES_SERVER_HOST=gmp-postgres-server
      - ORDER_POSTGRES_SERVER_PORT=${POSTGRES_SERVER_PORT}
      - ORDER_DB_NAME=${ORDER_DB_NAME}
      - ORDER_DB_USERNAME=${ORDER_DB_USERNAME}
      - ORDER_DB_PASSWORD=${ORDER_DB_PASSWORD}
    depends_on:
      gmp-postgres-server:
        condition: service_healthy
      gmp-config-server-service:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "${ORDERS_SERVICE_HEALTH_URL}" ]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 90s

  gmp-mongo-server:
    image: mongo:7.0.5
    container_name: gmp-mongo-server_db
    ports:
      - ${USER_MONGO_SERVER_PORT}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
    networks:
      - database
    restart: unless-stopped
  mongo-express:
    image: mongo-express:1.0.0-alpha.4
    container_name: gmp-mongo-express
    ports:
      - "8027:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: gmp-mongo-server
    networks:
      - database
  gmp-users-service:
    build: ./services/users-service
    container_name: gmp-users-service
    ports:
      - "8016:8016"
    environment:
      - DISCOVERY_SERVICE_URL=${ENV_DISCOVERY_SERVICE_URL}
      - CONFIG_SERVICE_URL=${ENV_CONFIG_SERVICE_URL}
      - MONGO_SERVER_HOST=gmp-mongo-server
      - MONGO_SERVER_PORT=${USER_MONGO_SERVER_PORT}
      - USER_MONGO_DB_USERNAME=${USER_MONGO_DB_USERNAME}
      - USER_MONGO_DB_PASSWORD=${USER_MONGO_DB_PASSWORD}
      - USER_MONGO_DB_NAME=${USER_MONGO_DB_NAME}
    depends_on:
      gmp-mongo-server:
        condition: service_healthy
      gmp-config-server-service:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "${USERS_SERVICE_HEALTH_URL}" ]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 90s

  mail-dev:
    container_name: gmp_mail_dev
    image: maildev/maildev:latest
    ports:
      - 1080:1080
      - 1025:1025
    networks:
      - microservices-net
    restart: unless-stopped

  gmp-gateway-service:
    build: ./services/gateway-service
    container_name: gmp-gateway-service
    ports:
      - "8010:8010"
    environment:
      - DISCOVERY_SERVICE_URL=${ENV_DISCOVERY_SERVICE_URL}
      - CONFIG_SERVICE_URL=${ENV_CONFIG_SERVICE_URL}
    depends_on:
      gmp-config-server-service:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "${GATEWAY_SERVICE_HEALTH_URL}" ]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 90s

volumes:
  postgres-data:
  pgadmin:
  mongo-data:
  mysql_data:

networks:
  microservices-net:
    driver: bridge
  database:
    driver: bridge
